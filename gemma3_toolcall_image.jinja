{#- Begin-of-sequence token to start the model prompt -#}
{{ bos_token }}
{#- 处理 system message（Gemma 不支持，需要塞到第一轮 user 前面） -#}
{%- if messages[0]['role'] == 'system' -%}
    {%- if messages[0]['content'] is string -%}
        {%- set first_user_prefix = messages[0]['content'] + '\n\n' -%}
    {%- else -%}
        {%- set first_user_prefix = messages[0]['content'][0]['text'] + '\n\n' -%}
    {%- endif -%}
    {%- set loop_messages = messages[1:] -%}
{%- else -%}
    {%- set first_user_prefix = "" -%}
    {%- set loop_messages = messages -%}
{%- endif -%}

{#- tools 未定义时设为 none -#}
{%- if not tools is defined %}
    {%- set tools = none %}
{%- endif %}

{#- 校验 user/assistant 轮流出现 -#}
{%- for message in loop_messages | rejectattr("role", "equalto", "tool") | selectattr("tool_calls", "undefined") %}
    {%- if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}
        {{ raise_exception("Conversation roles must alternate user/assistant/user/assistant/...") }}
    {%- endif %}
{%- endfor %}

{#- 主消息循环 -#}
{%- for message in loop_messages %}
    {%- if message['role'] == 'assistant' %}
        {%- set role = "model" %}
    {%- elif message['role'] == 'tool' %}
        {%- set role = "user" %}
    {%- else %}
        {%- set role = message['role'] %}
    {%- endif %}

    {{ '<start_of_turn>' + role + '\n' }}

    {%- if loop.first %}
        {{ first_user_prefix }}
        {%- if tools is not none %}
            {{- "以下是你可以调用的函数（工具）列表。" -}}
            {{- "💡 如果你决定调用函数，请只返回 Python 格式的函数调用列表。" -}}
            {{- "❌ 不要解释函数含义" -}}
            {{- "❌ 不要使用代码块" -}}
            {{- "❌ 不要使用 Markdown 或变量" -}}
            {{- "❌ 不要添加任何额外说明文字" -}}
            {{- "✅ 正确的调用格式示例：" -}}
            {{- "[函数名1(参数1=\"值\", 参数2=2), 函数名2(...) ]" -}}
            {{- "⚠️ 如果没有合适的函数，或者参数不完整，请直接说明，不要编造参数。" -}}
            {{- "以下是你可以使用的函数定义：" -}}
            {{- tools | tojson(indent=4) -}}
            {{- "\n\n" -}}
        {%- endif %}
    {%- endif %}

    {#- 渲染工具调用（标准 JSON 格式） -#}
    {%- if 'tool_calls' in message %}
    [
    {%- for tool_call in message.tool_calls %}
        {%- if tool_call.function is defined %}
            {%- set func = tool_call.function %}
        {%- else %}
            {%- set func = tool_call %}
        {%- endif %}
        {{ func.name }}(
            {%- if func.arguments is mapping %}
                {%- for key, val in func.arguments.items() %}
                    {{ key }}={{ val | tojson }}{% if not loop.last %}, {% endif %}
                {%- endfor %}
            {%- elif func.arguments is iterable %}
                {{ func.arguments | map('tojson') | join(', ') }}
            {%- else %}
                {{ func.arguments | tojson }}
            {%- endif %}
        )
        {%- if not loop.last %}, {% endif %}
    {%- endfor %}
    ]
    {%- endif %}


    {#- 工具响应开始标签 -#}
    {%- if message['role'] == 'tool' %}
        {{ '<tool_response>' -}}
    {%- endif %}

    {#- 渲染内容：字符串或 multimodal（含 image） -#}
    {%- if message['content'] is string %}
        {{ message['content'] | trim }}
    {%- elif message['content'] is iterable %}
        {%- for item in message['content'] %}
            {{ item | tojson }}{% if not loop.last %}\n{% endif %}
        {%- endfor %}
    {%- else %}
        {{ raise_exception("Invalid content type") }}
    {%- endif %}


    {%- if message['role'] == 'tool' %}
        {{ '</tool_response>' -}}
    {%- endif %}

{{'<end_of_turn>'}}
{%- endfor %}

{#- 是否需要继续生成下一轮 model 响应 -#}
{%- if add_generation_prompt %}
    {{'<start_of_turn>model\n'}}
{%- endif %}
